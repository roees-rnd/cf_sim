#!/bin/bash

SESSION=$USER
tmux -2 new-session -d -s $SESSION
tmux split-window -h
tmux select-pane -t 0

xhost + local:

XAUTH=/tmp/.docker.xauth

SELF_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

CATKIN_PATH="/home/cf_user/catkin_ws"

if [ "$#" -ne 1 ]; then
    echo "Usage:"
    echo "./dockerRun <dockerImageName:tag>"
    echo ""
    echo "available options:"
    docker images | tail -n +2 | awk '{print NR " ./docker "$1":"$2}'
    echo ""
    
    read -p 'select option number:' optNum
    imgTag=`docker images | tail -n +2 | awk '{print NR " ./docker "$1":"$2}' | grep ^$optNum | cut -d" " -f3-`
    
    nChars=`echo $imgTag | wc -c`

    if [ $nChars -gt 2 ]; then
        echo "chosen image:tag - $imgTag"
    else
        echo "choice not recognized. exiting ..."
        exit 2
    fi
else
    imgTag=$1
fi

if [ ! -f $XAUTH ]
then
    xauth_list=$(xauth nlist :0 | sed -e 's/^..../ffff/')
    if [ ! -z "$xauth_list" ]
    then
        echo $xauth_list | xauth -f $XAUTH nmerge -
    else
        touch $XAUTH
    fi
    chmod a+r $XAUTH
fi

NUM_CNTR=`docker ps -a | wc -l`
MYIP=`hostname -I | cut -d' ' -f1`

DOCKER_MOUNTS="-v $SELF_DIR/sim_cf_gazebo:$CATKIN_PATH/src/sim_cf_gazebo"
DOCKER_MOUNTS="$DOCKER_MOUNTS -v $SELF_DIR/sim_cf_firmware:$CATKIN_PATH/src/sim_cf_firmware"
DOCKER_MOUNTS="$DOCKER_MOUNTS -v $SELF_DIR/tools:$CATKIN_PATH/../tools"
# DOCKER_GUI="--privileged -e DISPLAY=host.docker.internal:0 -v /tmp/.X11-unix:/tmp/.X11-unix:ro"
DOCKER_GUI"--privileged -e DISPLAY=${MYIP}:0"
# DOCKER_GUI="--privileged -e DISPLAY=${DISPLAY} -v /tmp/.X11-unix:/tmp/.X11-unix -v ${HOME}/.Xauthority:/home/${USER_NAME}/.Xauthority"
DOCKER_GDB="--cap-add=SYS_PTRACE --security-opt seccomp=unconfined"
#DOCKER_PARAMS="--net=host --rm"
DOCKER_PARAMS="--rm"
echo "sharing volumes: $DOCKER_MOUNTS"

echo
read -p "Enable display sharing (y/n)?  " -n 1 -r
echo

if [[ $REPLY =~ ^[Yy]$ ]];then
    echo "Enable display sharing"
    tmux send-keys "docker run -i $DOCKER_PARAMS $DOCKER_GUI $DOCKER_MOUNTS $DOCKER_GDB --entrypoint \"/startup.sh\" $imgTag" C-m
else
	echo "Disable display sharing"
#	tmux send-keys "docker run -i $DOCKER_PARAMS $DOCKER_MOUNTS $DOCKER_GDB --entrypoint \"/startup.sh\" $imgTag" C-m
	tmux send-keys "docker run -i $DOCKER_PARAMS $DOCKER_MOUNTS $DOCKER_GDB $imgTag bash" C-m
fi
echo

tmux select-pane -t 1
sleep 2

CNTNAME=`docker ps --last 1 | tail -n 1 | awk '{print $NF}'`
CNTID=`docker ps --last 1 | tail -n 1 | awk '{print $0}'`

#execute commands in docker container: 
docker exec -i $CNTNAME sh -c "echo \"source $CATKIN_PATH/devel/setup.bash\" >> /root/.bashrc"


#copy file into container:
#echo "hello docker" > test_file.txt
#docker cp test_file.txt $CNTNAME:/home/cf_user/test_file_cpy.txt

docker exec -i $CNTNAME sh -c "mkdir /home/cf_user/catkin_ws/src/.vscode"
docker cp .vscode/c_cpp_properties.json $CNTNAME:/home/cf_user/catkin_ws/src/.vscode/c_cpp_properties.json
docker cp .vscode/settings.json $CNTNAME:/home/cf_user/catkin_ws/src/.vscode/settings.json

#test existance of tools dir (/home/cf_user/tools) and create it if neccessary:
E=`docker exec $CNTNAME [ -d "/home/cf_user/tools" ] && echo "Y" || echo "N"`
if [ $E == "N" ];then 
	echo "mkdir /home/cf_user/tools"
	docker exec $CNTNAME bash -c "mkdir /home/cf_user/tools"
fi

if test -f "tools/export_ips.sh"; then
	docker exec -i $CNTNAME sh -c "echo \"alias xip='source /home/cf_user/tools/export_ips.sh'\" >> /root/.bashrc"
	echo "aliased ./export_ips.sh as xip"
fi

if test -f "tools/fix_cr.sh"; then
	docker exec -i $CNTNAME sh -c "echo \"alias fixcr='/home/cf_user/tools/fix_cr.sh'\" >> /root/.bashrc"
	echo "aliased ./fix_cr.sh as fixcr"
fi

docker exec -i $CNTNAME /bin/bash -c "echo \"alias vsc='code --user-data-dir /home/cf_user/tmp'\" >> /root/.bashrc"

tmux send-keys "docker exec -it $CNTNAME /bin/bash" C-m
tmux send-keys "cd $CATKIN_PATH;source devel/setup.bash;catkin build" C-m


tmux split-window -v
sleep 1
# tmux select-pane -t 1

tmux send-keys "docker exec -it $CNTNAME /bin/bash" C-m
tmux send-keys "cd $CATKIN_PATH/src/sim_cf_firmware/sitl_make/;mkdir build;cd build;cmake ..;make" C-m
sleep 2
tmux send-keys "echo \"run visual studio code:\"" C-m
tmux send-keys "vsc"


# Set default window
tmux select-window -t $SESSION:1

# Attach to session
tmux -2 attach-session -t $SESSION


