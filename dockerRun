#!/bin/bash
SESSION=$USER
tmux -2 new-session -d -s $SESSION
tmux split-window -h
tmux select-pane -t 0

XAUTH=/tmp/.docker.xauth

SELF_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

CATKIN_PATH="/home/cf_user/catkin_ws"

if [ "$#" -ne 1 ]; then
    echo "Usage:"
    echo "./dockerRun <dockerImageName:tag>"
    echo ""
    echo "available options:"
    docker images | tail -n +2 | awk '{print NR " ./docker "$1":"$2}'
    echo ""
    
    read -p 'select option number:' optNum
    imgTag=`docker images | tail -n +2 | awk '{print NR " ./docker "$1":"$2}' | grep ^$optNum | cut -d" " -f3-`
    
    nChars=`echo $imgTag | wc -c`

    if [ $nChars -gt 2 ]; then
        echo "chosen image:tag - $imgTag"
    else
        echo "choice not recognized. exiting ..."
        exit 2
    fi
else
    imgTag=$1
fi

if [ ! -f $XAUTH ]
then
    xauth_list=$(xauth nlist :0 | sed -e 's/^..../ffff/')
    if [ ! -z "$xauth_list" ]
    then
        echo $xauth_list | xauth -f $XAUTH nmerge -
    else
        touch $XAUTH
    fi
    chmod a+r $XAUTH
fi

echo
read -p "Run vnc (browser desktop) (y/n)?  " -n 1 -r
echo

NUM_CNTR=`docker ps -a | wc -l`
SHARE_VOL="--volume=\"$SELF_DIR/sim_cf_gazebo:$CATKIN_PATH/src/sim_cf_gazebo\""
SHARE_VOL="$SHARE_VOL --volume=\"$SELF_DIR/sim_cf_firmware:$CATKIN_PATH/src/sim_cf_firmware\""

if [[ $REPLY =~ ^[Yy]$ ]];then
    echo "running vnc.."
	tmux send-keys "docker run -i --env=\"DISPLAY=$DISPLAY\" $SHARE_VOL --env=\"QT_X11_NO_MITSHM=1\" --volume=\"/tmp/.X11-unix:/tmp/.X11-unix:rw\" --env=\"XAUTHORITY=$XAUTH\" --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --volume=\"$XAUTH:$XAUTH\" --entrypoint \"/startup.sh\" $imgTag" C-m
else
	echo "not running vnc.. (in order to run execute /startup.sh inside the container)"
	tmux send-keys "docker run -i --entrypoint \"/startup.sh\" $imgTag" C-m
fi
echo
	

tmux select-pane -t 1
sleep 2

CNTNAME=`docker ps --last 1 | tail -n 1 | awk '{print $NF}'`
CNTID=`docker ps --last 1 | tail -n 1 | awk '{print $0}'`

#execute commands in docker container: 
docker exec -i $CNTNAME sh -c "echo \"source $CATKIN_PATH/devel/setup.bash\" >> /root/.bashrc"


#copy file into container:
#echo "hello docker" > test_file.txt
#docker cp test_file.txt $CNTNAME:/home/cf_user/test_file_cpy.txt


#test existance of tools dir (/home/cf_user/tools) and create it if neccessary:
E=`docker exec $CNTNAME [ -d "/home/cf_user/tools" ] && echo "Y" || echo "N"`
if [ $E == "N" ];then 
	echo "mkdir /home/cf_user/tools"
	docker exec $CNTNAME bash -c "mkdir /home/cf_user/tools"
fi

if test -f "tools/export_ips.sh"; then
	echo "copying tools/export_ips.sh to container at /home/cf_user/tools/export_ips.sh"
	docker cp tools/export_ips.sh $CNTNAME:/home/cf_user/tools/export_ips.sh
	docker exec -i $CNTNAME sh -c "echo \"alias xip='source /home/cf_user/tools/export_ips.sh'\" >> /root/.bashrc"
	echo "aliased as xip"
fi

if test -f "tools/fix_cr.sh"; then
	echo "copying tools/fix_cr.sh to container at /home/cf_user/tools/fix_cr.sh"
	docker cp tools/fix_cr.sh $CNTNAME:/home/cf_user/tools/fix_cr.sh
	docker exec -i $CNTNAME sh -c "echo \"alias fixcr='/home/cf_user/tools/fix_cr.sh'\" >> /root/.bashrc"
	echo "aliased as fixcr"
fi

# docker exec -i $CNTNAME /bin/bash -c "cd $CATKIN_PATH;source /opt/ros/kinetic/setup.bash;catkin build"
docker exec -i $CNTNAME /bin/bash -c "cd $CATKIN_PATH;source devel/setup.bash;catkin build"
docker exec -i $CNTNAME /bin/bash -c "cd $CATKIN_PATH/src/sim_cf_firmware/sitl_make/;mkdir build;cd build;cmake ..;make"

docker exec -i $CNTNAME /bin/bash -c "echo \"alias vsc='code --user-data-dir /home/cf_user/tmp'\" >> /root/.bashrc"

tmux send-keys "docker exec -it $CNTNAME /bin/bash" C-m

# Set default window
tmux select-window -t $SESSION:1

# Attach to session
tmux -2 attach-session -t $SESSION


